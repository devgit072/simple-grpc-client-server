// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package employeepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	// Server streaming api.
	ServerSreaming(ctx context.Context, in *EmployeesRequest, opts ...grpc.CallOption) (EmployeeService_ServerSreamingClient, error)
	// Client streaming api.
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_ClientStreamingClient, error)
	// Bi-directional streaming api.
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_BidirectionalStreamingClient, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) ServerSreaming(ctx context.Context, in *EmployeesRequest, opts ...grpc.CallOption) (EmployeeService_ServerSreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeService_ServiceDesc.Streams[0], "/employee.EmployeeService/ServerSreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceServerSreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeService_ServerSreamingClient interface {
	Recv() (*EmployeeResponse, error)
	grpc.ClientStream
}

type employeeServiceServerSreamingClient struct {
	grpc.ClientStream
}

func (x *employeeServiceServerSreamingClient) Recv() (*EmployeeResponse, error) {
	m := new(EmployeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeService_ServiceDesc.Streams[1], "/employee.EmployeeService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceClientStreamingClient{stream}
	return x, nil
}

type EmployeeService_ClientStreamingClient interface {
	Send(*Employee) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type employeeServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *employeeServiceClientStreamingClient) Send(m *Employee) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employeeServiceClientStreamingClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (EmployeeService_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeService_ServiceDesc.Streams[2], "/employee.EmployeeService/BidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeServiceBidirectionalStreamingClient{stream}
	return x, nil
}

type EmployeeService_BidirectionalStreamingClient interface {
	Send(*Employee) error
	Recv() (*EmployeeResponse, error)
	grpc.ClientStream
}

type employeeServiceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *employeeServiceBidirectionalStreamingClient) Send(m *Employee) error {
	return x.ClientStream.SendMsg(m)
}

func (x *employeeServiceBidirectionalStreamingClient) Recv() (*EmployeeResponse, error) {
	m := new(EmployeeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility
type EmployeeServiceServer interface {
	// Server streaming api.
	ServerSreaming(*EmployeesRequest, EmployeeService_ServerSreamingServer) error
	// Client streaming api.
	ClientStreaming(EmployeeService_ClientStreamingServer) error
	// Bi-directional streaming api.
	BidirectionalStreaming(EmployeeService_BidirectionalStreamingServer) error
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (UnimplementedEmployeeServiceServer) ServerSreaming(*EmployeesRequest, EmployeeService_ServerSreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSreaming not implemented")
}
func (UnimplementedEmployeeServiceServer) ClientStreaming(EmployeeService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedEmployeeServiceServer) BidirectionalStreaming(EmployeeService_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_ServerSreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmployeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeServiceServer).ServerSreaming(m, &employeeServiceServerSreamingServer{stream})
}

type EmployeeService_ServerSreamingServer interface {
	Send(*EmployeeResponse) error
	grpc.ServerStream
}

type employeeServiceServerSreamingServer struct {
	grpc.ServerStream
}

func (x *employeeServiceServerSreamingServer) Send(m *EmployeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmployeeService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployeeServiceServer).ClientStreaming(&employeeServiceClientStreamingServer{stream})
}

type EmployeeService_ClientStreamingServer interface {
	SendAndClose(*Response) error
	Recv() (*Employee, error)
	grpc.ServerStream
}

type employeeServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *employeeServiceClientStreamingServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employeeServiceClientStreamingServer) Recv() (*Employee, error) {
	m := new(Employee)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmployeeService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmployeeServiceServer).BidirectionalStreaming(&employeeServiceBidirectionalStreamingServer{stream})
}

type EmployeeService_BidirectionalStreamingServer interface {
	Send(*EmployeeResponse) error
	Recv() (*Employee, error)
	grpc.ServerStream
}

type employeeServiceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *employeeServiceBidirectionalStreamingServer) Send(m *EmployeeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *employeeServiceBidirectionalStreamingServer) Recv() (*Employee, error) {
	m := new(Employee)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSreaming",
			Handler:       _EmployeeService_ServerSreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _EmployeeService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _EmployeeService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streaming_api/protos/employee.proto",
}
